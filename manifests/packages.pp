# manifests/packages.pp
#

define pocketprotector::packages::parse (
  String $packagesyaml,
){
  lookup($packagessyaml, undef, 'deep', undef).each |String $filename, Hash $filehash| {
    #notify {"pocketprotector::files: debug file for ${filename}":}
    package {
      $filename:
        name                 => lookup("${packagesyaml}.${filename}.name", undef, 'deep', undef), # (namevar) The package name.  This is the name that the...
        command              => lookup("${packagesyaml}.${filename}.command", undef, 'deep', undef), # (namevar) The targeted command to use when managing a...
        ensure               => lookup("${packagesyaml}.${filename}.ensure", undef, 'deep', 'present'), # What state the package should be in. On...
        adminfile            => lookup("${packagesyaml}.${filename}.adminfile", undef, 'deep', undef), # A file containing package defaults for...
        allow_virtual        => lookup("${packagesyaml}.${filename}.allow_virtual", undef, 'deep', undef), # Specifies if virtual package names are allowed...
        allowcdrom           => lookup("${packagesyaml}.${filename}.allowcdrom", undef, 'deep', undef), # Tells apt to allow cdrom sources in the...
        category             => lookup("${packagesyaml}.${filename}.category", undef, 'deep', undef), # A read-only parameter set by the...
        configfiles          => lookup("${packagesyaml}.${filename}.configfiles", undef, 'deep', undef), # Whether to keep or replace modified config files
        description          => lookup("${packagesyaml}.${filename}.description", undef, 'deep', undef), # A read-only parameter set by the...
        enable_only          => lookup("${packagesyaml}.${filename}.enable_only", undef, 'deep', undef), # Tells `dnf module` to only enable a specific...
        flavor               => lookup("${packagesyaml}.${filename}.flavor", undef, 'deep', undef), # OpenBSD and DNF modules support 'flavors', which
        install_only         => lookup("${packagesyaml}.${filename}.install_only", undef, 'deep', undef), # It should be set for packages that should only...
        install_options      => lookup("${packagesyaml}.${filename}.install_options", undef, 'deep', undef), # An array of additional options to pass when...
        instance             => lookup("${packagesyaml}.${filename}.instance", undef, 'deep', undef), # A read-only parameter set by the...
        mark                 => lookup("${packagesyaml}.${filename}.mark", undef, 'deep', undef), # Set to hold to tell Debian apt/Solaris pkg to...
        package_settings     => lookup("${packagesyaml}.${filename}.package_settings", undef, 'deep', undef), # Settings that can change the contents or...
        platform             => lookup("${packagesyaml}.${filename}.platform", undef, 'deep', undef), # A read-only parameter set by the...
        provider             => lookup("${packagesyaml}.${filename}.provider", undef, 'deep', undef), # The specific backend to use for this `package...
        reinstall_on_refresh => lookup("${packagesyaml}.${filename}.reinstall_on_refresh", undef, 'deep', undef), # Whether this resource should respond to refresh...
        responsefile         => lookup("${packagesyaml}.${filename}.responsefile", undef, 'deep', undef), # A file containing any necessary answers to...
        root                 => lookup("${packagesyaml}.${filename}.root", undef, 'deep', undef), # A read-only parameter set by the...
        source               => lookup("${packagesyaml}.${filename}.source", undef, 'deep', undef), # Where to find the package file. This is mostly...
        status               => lookup("${packagesyaml}.${filename}.status", undef, 'deep', undef), # A read-only parameter set by the...
        uninstall_options    => lookup("${packagesyaml}.${filename}.uninstall_options", undef, 'deep', undef), # An array of additional options to pass when...
        vendor               => lookup("${packagesyaml}.${filename}.vendor", undef, 'deep', undef), # A read-only parameter set by the...
      }
  }
}

class pocketprotector::packages {
  include pocketprotector::packages::repositories

  if lookup('pocketprotector::packages', undef, 'deep', false) {
    pocketprotector::packages::parse{'pocketprotector::packages':}
  }
}

# build repository list & pass to appropriate module
class pocketprotector::packages::repositories {
  case lookup('pocketprotector::packages::provider') {
    'apt': {
      include pocketprotector::packages::repositories::apt
    }
    'zypper': {
      include pocketprotector::packages::repositories::zypper
    }
    default: {
      notify{'pocketprotector::packages::repositories: the package repository for your OS is not (yet?) supported':}
    }
  }
}
